[["index.html", "Ryten lab induction book 1 Welcome! 1.1 Useful links 1.2 Acknowledgements", " Ryten lab induction book 2020-11-09 1 Welcome! We hope you enjoy your time in the Ryten lab! The goal of this book is to capture the tasks we share as a team and document the things we would have liked to have known throughout our time in the Ryten lab. 1.1 Useful links The Ryten lab website has all of our backgrounds, developed tools, publications and baby photos. The Ryten lab GitHub currently is only used to host this book, however in future will hold any other repositories that are common to the Ryten lab. The Ryten lab Sharepoint. To access this, you must be a member of rytenlab (if you are receiving e-mails from rytenlab@live.ucl.ac.uk, then you are a member). If you are a not a member, let one of the existing members know and we’ll add you. 1.2 Acknowledgements This book was made possible thanks to the R package bookdown (Xie 2020). The below code automatically generates packages.bib, a bibtex format for all the packages listed. If you contribute to this book and include a particular R package in your guide (as with bookdown above), consider adding it to the code chunk and citing it via including [@R-package_name] in the text. knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39; ), &#39;packages.bib&#39;) References "],["contribute.html", "2 Contributing guide 2.1 Why contribute? 2.2 What should I contribute? 2.3 How should I contribute?", " 2 Contributing guide 2.1 Why contribute? Given that we work on similar topics and share a similar infrastructure, we also have a lot of common tasks. For example, every new member will have to learn how to use the Ryten server, or R in general, or potentially run RNA-seq alignment/QC. This can be daunting at first and this book aims to ease that transition. The more comprehensive this book is, the better the experience of future or existing Ryten lab members will be. Thus, we would encourage all Ryten Lab members to contribute. 2.2 What should I contribute? If you have a workflow that you’ve been asked from a colleague more than once to explain or share code, then it’s worth considering whether it should be part of this book. The more common the task, the more useful it will be when sitting in this book. From experience, the easiest time to add new workflows/instructions is during the time you actually conduct that workflow yourself so when you’re next asked to run that gene-set enrichment analysis, consider documenting that run here, even if it’s just a page with links to your code on GitHub/the server. 2.3 How should I contribute? This book is built using the R package bookdown (Xie 2020). A brilliant guide for the comprehensive functionality of bookdown is written by the author of the package Yihui Xie here. If you’re interested in writing your own book, we’d suggest checking it out. However, below is a small guide to get you started if you want to contribute to this book. 2.3.1 Basics Prerequisites. Install the bookdown R package. install.packages(&quot;bookdown&quot;) Clone the repository containing this book. If you’re unfamiliar with GitHub or git, check out this guide. git clone https://github.com/rytenlab/ryten_induction.git Adding a new page. Familiarize yourself with the structure of the book. The usage page of the bookdown guide gives a nice overview. In brief, .Rmd docs are the pages of the book. The index.Rmd serves as the header/preface/first page of the book. The remainder of the .Rmd files are labeled with “01-PAGE-NAME” and form the pages of this book. To create a new page, just make a new .Rmd and name it with an informative title. Bear in mind that the pages will be ordered by their alphanumerical name (01, 02, 03…). The contents of each .Rmd (except index.Rmd) is expected to have one “#” prefixed title, which will be the title of the page. If you want to include subsections, then use “##” or “###” etc. The rest of the page structure follows the traditional .Rmd syntax. Note: By default, .Rmd files have a YAML header at the top contained within the “—”s. If you are making a new page please remove these, leaving just a “# PAGE TITLE” at the top. The YAML header for the entire book can be found in the index.Rmd. Rendering the page/book. Throughout the writing of your page, you can check how it looks in the context of the book through either pressing the Knit button on the top left of RStudio. This will give a preview of your new page. If you want to re-render the entire book, then first create a new Rproject in the root of your local bookdown repository. Then after opening the .Rproj you should see a build panel on the top-right (shown below). Clicking the Build Book option will knit/render the entire book 2.1. It’s recommended that you continuously run these checks as you update the book, to ensure it looks as you expect and doesn’t break anything. Figure 2.1: Screen of how to build a book Publishing the book. The public version of this book sits at https://rytenlab.github.io/ryten_induction/ hosted by GitHub pages. This is updated every time you make a git push to the repository via GitHub Actions (GHA). The GHA workflow will automatically render this book and push the changes to the branch gh-pages, which is then deployed at https://rytenlab.github.io/ryten_induction/. Therefore, if your book fails to render on GHA, it won’t update. You can see if it’s failed (red X) or succeeded (green tick) on the GiHub repo a few minutes after pushing. It’s important to try rendering the book locally to ensure your changes operate as intended. If all the changes look good and you’re happy with it, then push the change from your local repository back to rytenlab/ryten_induction. Note: If you are using other R packages (outside of bookdown and rmarkdown) in your newly added pages, then this might break the GHA workflow. Don’t worry! We just need to make sure the necessary packages are installed as GHA runs on a fresh-ish install of Ubuntu. If this is the case, then speak to David (will try to automate the package installation in future). # make sure you&#39;re in your local repo cd ryten_induction # you can check this via git status git status git add YOUR_CHANGES git commit -m &quot;message&quot; git push That’s it! You’re done! Thank you for contributing to making our future lives easier :) 2.3.2 Adding References References can be added in two ways: Add a package to the code chunk in index.Rmd labeled “r_package_references”. Then, refer it in the text via [@R-package_name]. Add a bibtex entry to book.bib then refer to in via [@key]. Eg. (Wickham 2014). References "],["learning-r.html", "3 Learning R 3.1 Why R? 3.2 R resources 3.3 Asking for help 3.4 Teaching R", " 3 Learning R R is used by anyone in the Ryten lab looking to do bioinformatics analyses. Chances are, if you’ve joined to do bioinformatics you’ve come across or will come across using R. There’s a steep learning curve to start programming and it’s easy to become stumped before you become familiar, and miss out on all of the joy programming with R can give. This page is dedicated to help you get you started by pointing you to the resources that we’ve found useful no matter what stage of learning R you fall into. 3.1 Why R? This page from Hadley Wickham’s book lays out what makes R unique and why many are fond of R. Below, are the 3 key reasons we think R is great for our bioinformatics use-case: R is free and open source. This makes your analyses more reproducible if you use R and means there’s a huge community of R users. Importantly, a large proportion of this community is addressing similar questions you are, relating to genetics/bioinformatics. Bioconductor, for example, is specifically aimed at developing tools applied to all things biology. This makes our lives easier as if we run into questions that we can’t answer in the lab or via google, there might already be an R package that addresses it and if not, there are forums to ask for help. R is a high-level, functional programming language. These properties make it suited for data science and day-to-day bioinformatics analysis, where most often the leading metric is speed from data to results, rather than developing robust software. This aspect of R has inspired the development of set of packages termed the tidyverse, which makes mastering data wrangling, analysis and plotting significantly easier. R comes with one of the most easy-to-use integrated development environments (IDEs) RStudio and it’s own language for creating reproducible analyses Rmarkdown. RStudio makes the entry point into getting started with R significantly lower with the ability to manage projects, inspect objects and version control with git (+ many more). Together with Rmarkdown, a language that allows you combine R code and prose in the same document, this facilitates the creation of reproducible analyses. 3.2 R resources Whether you’ve never touched a programming language before, or you’re an expert in a different programming language, or you’re confident with conducting analyses in R, we hope that you find something useful in below. 3.2.1 Beginner Not technically a resource, but one which arguably is more important. Learning R is typically easiest when you have a project to work on from the outset. This helps to keep you motivated, means you’ll cover “real” data issues and learn how to debug. It’s likely that you’ll already have an application in mind if you’re reading this, but if not, we’d encourage you to find one. One great place to start could be to ask the Mina/lab whether any of us has something we need doing. DataCamp and codeacademy host online, interactive courses to learn R from the basics. These have been used by other’s in the Ryten Lab in the past and are a fun way to take you through the basic foundations of R. learnr is an interactive R package designed to get you started with R. As far as I’m aware, I don’t think any of us has started R through this route, however does look to be a solid resource. 3.2.2 Intermediate R for data science has pretty much all you need to know in terms of the tidyverse set of tools. R Markdown Cookbook is written by one of the authors of R Markdown, Yihui Xie, and is a good place to find the comprehensive overview of the functionality of R Markdown or look up if there’s something you’d like to do but aren’t sure how or whether it’s possible. Happy Git with R is a nicely written book on how to interface into git and GitHub from RStudio. If you haven’t heard of or used git for version controlling your scripts before, this is highly recommended and has all you need to know. 3.2.3 Advanced Advanced R is for those wondering what goes on behind the scenes in R. It covers topics from how to use object orientated programming in R, how to run benchmarks on your code to find time-limiting steps and how to speed these up using R’s interface into C++ ? R packages details the good practices for creating an R package. Packages are the best way to allow others to use your R code. You may consider packaging up your code if you want to release your functions to be used by others (either others in the lab or more widely). 3.3 Asking for help The world of coding can be tough at times and admitting that fact by asking for help can be even harder. But trust us, we’ve all been there. The 3 hour debug before noticing the misplaced “,”, the package that never installs, the frustrating git conflict - all too familiar. Whichever stage of your coding journey you’re at, you will always run into bugs and knowing how to efficiently find solutions is a major part of the battle. Here, we list to most common places we would ask for help from the trusty Google companion to more specific forums where you will reach experts or R package maintainers. 3.3.1 Where to ask for help? Google is often the best place to start and many issues you face won’t be a first and will be answered by forums such as Stack Overflow. The Ryten lab has a Slack workspace (ask to be added if not already) and either the channels #programming or #general are great places to reach us. If that’s intimidating, also feel free to message any of us directly. If neither Google or our lab has provided an answer to your issue, it might be that your problem is unique or specific. For these sorts of question it’s best to try and direct your query to the experts in the relevant field. For example, if your issue is targeted at a usage of an R package, then the issues page on the associated GitHub repository is the best place to get in touch with the maintainers of that package. Or, if it’s more of a broad question (e.g. what covariates should I correct for when run a differential splicing analysis) the Bioconductor support site provides a catalog of questions surrounding how to use it’s packages. 3.3.2 How to ask for help? Given that the people which you are asking (as we all) are busy and have limited time, it’s important to help make it as easy as possible to answer your query. Below, in order of importance, are the steps we’d recommend thinking about before reaching out: If it’s appropriate (i.e. not a general question) then include, at minimum, the error message and command you have run as part of your question. It’s most likely, the code will be more effective at directing your query than a text based explanation. If the question is about a bug or quite a specific situation, it’s best if you include a minimum reproducible example (reprex). This consists of setting up a small section of code that can be used to replicate your error including a sessionInfo() call (that details the versions of R packages in your environment. The reprex package provides a great way to capture both the code and it’s output in different formats e.g. an R script, markdown or html. 3.4 Teaching R If you’ve reached a point where you’re comfortable with R, you might consider teaching it. Here are some reasons we’ve taught in the past: It’s rewarding as usually students are really grateful. It looks good on your CV. Networking with companies and academic groups that you may be interested in working with/for in the future. You can earn some extra £££. It’s a great refresher of the basics of R. The Ryten lab has a existing connection with Clinician Coders, a group at UCL that aims at teaching R to clinicians. If this is of interest to you, then let Mina know and she’ll put you in touch with the right lab members involved at the time. "],["server.html", "4 Server usage 4.1 Why use the Ryten server? 4.2 How to connect to the Ryten server?", " 4 Server usage 4.1 Why use the Ryten server? Remote servers are useful for a few reasons: They enable a common environment for all members of the area to work on. You can easily share results without duplication or data that’s too large to sit on your personal computers by sharing the path to the directory/file on Ryten server. They allow you to conduct analysis that exceeds the computational resources of (or take extremely long on) your local computer. The Ryten server has &gt;20Tb of storage space, ~256Gb of RAM and 112 CPUs, though at times, even this will feel too small! 4.2 How to connect to the Ryten server? TO BE ADDED - maybe will do it when it next needs to be done "],["data-backup.html", "5 Data backup 5.1 Why backup your data stored on the Ryten server? 5.2 What options are available to you as Ryten server user? 5.3 What are good practices for data backup? 5.4 AWS 5.5 Github 5.6 UCL RDS", " 5 Data backup The purpose of this chapter is to guide you through the available options for backup of data stored on the Ryten server. For backup of data on your personal/work computers, we recommend making use of cloud solutions, such as OneDrive for Business, available to UCL staff and students. Note: data backup is the responsibility of each Ryten server user. We do not currently have any automated systems in place, so it is really important that you take the time to ensure you have all the proper backups in place. 5.1 Why backup your data stored on the Ryten server? There are several good reasons to backup your data stored on the Ryten server, including: As with all other servers, the Ryten server can also be affected by server failure (this has not happened to us, *touch wood*, but it certainly can). There may be occasions when you cannot access the server (e.g. VPN does not permit access). Other users may accidentally delete or modify one of your files (yes, this has happened in the past). In short, a lot of things can happen, which might mean you need to access your files via other means. Thus, it is important to have a backup of the raw files you use, any processed intermediate files, and the scripts you use both for data processing and analysis. 5.2 What options are available to you as Ryten server user? Luckily, there are plenty of options available to you, including: Amazon Web Services (AWS) The Ryten lab has an account on AWS where it is possible to store data. We primarily use this for unprocessed data (e.g. RNA-sequencing FASTQs), although it can also be useful to store processed files (e.g. BAMs) that collaborators may ask to access. GitHub Git is a version control system (think “Track Changes” in Word), while GitHub is a cloud-based hosting service for Git-based projects (think OneDrive). We primarily use this to store functions, scripts and workflows for our analyses. Importantly, as a student/researcher you can access a free/discounted version of GitHub Pro, which allows users to have private repositories. Private repositories are useful for ongoing projects that are not ready for publication just yet. Upon publication, these private repositories can be made public. If you’re unfamiliar with GitHub or git, please refer to this handy guide, also mentioned in Section 2.3. UCL RDS This is a UCL-based service, while allows UCL staff to store research data while projects are ongoing. We primarily use this to store processed intermediate files. 5.3 What are good practices for data backup? It is a good idea to ensure that really important files that cannot be regenerated (e.g. raw sequencing files) or alternatively would take days/weeks to re-generate are stored in two backup locations. Make sure the scripts you need to re-generate analyses/files are on GitHub. Ensure that you have an easily accessible record of what you are backing up and where. Most importantly, make sure you regularly backup to these locations. E.g. ongoing projects should be backed up to UCL RDS at least once a month, while scripts/workflows should preferably be committed to GitHub daily/weekly. 5.4 AWS Sonia Garcia Ruiz is our AWS guru. You will need to get in contact with Sonia to arrange access to our AWS account. Thereafter, here are some useful links, also generated by Sonia. These links are hosted on the Ryten lab Sharepoint, which you can access provided you are a member. Accessing AWS using the AWS Command Line Interface Checking AWS file integrity Information about existing AWS buckets 5.5 Github A good explanation of how to get started with git using RStudio can be in the book “Happy Git with R” linked here. TO BE ADDED (MAYBE A SEPARATE PAGE WITH GITHUB TUTORIAL?). Link worth adding: https://www.makeareadme.com/ 5.6 UCL RDS 5.6.1 Registering a project Prior to using UCL RDS, you need to ensure that you have a project space allocated to you. This can be done here. If you are not UCL staff, you will not be able to register your own project. If that is the case, reach out to one of us that is, and we can register a project on your behalf and add you as a project member. 5.6.2 Accessing your project space When the project was generated, researchdata-support@ucl.ac.uk will send you an e-mail with important details about the location of your storage area (an example is: /mnt/gpfs/live/rd01__/ritd-ag-project-rd010p-sgarc61/) From the Ryten server, this project space can be accessed using the following command, and substituting your UCL username into the command below, instead of ucl_username. ssh ucl_username@live.rd.ucl.ac.uk You will be prompted for a password, and upon entering this you will be re-directed to your home space on UCL RDS. You can then move to your project area using the following command, and substituting in the path to your storage area. cd /mnt/gpfs/live/path_to_storage_area/ 5.6.3 Using rsync to backup to UCL RDS rsync (remote sync), as the name suggests, permits file transfer across systems (e.g. from the Ryten server to UCL RDS). While the initial backup will take a while, rsync is a super handy tool for regular backups, as it will only transfer files that have been changed after the initial backup. Furthermore, with the correct flags enabled, you can ensure that any files that have been deleted on the local server (Ryten server) are not deleted on the remote server (UCL RDS) when running rsync again. 5.6.3.1 Simple use case Google is a great resource, so feel free to read up a bit more on rsync. Also, you can always run the command rsync --help to see what options there are. Below is a simple use case, with the various flags explained with the #. # -a preserve access times etc # -r recursive # -v verbose # -h human readable figures # -e select the protocol - ssh used here # --progress display progress bar # --relative preserves directory structure in the local backup location from /./ onwards # Example rsync -arvhe ssh --progress --relative /path_to_files/ ucl_username@live.rd.ucl.ac.uk:/mnt/gpfs/live/path_to_storage_area/ Notice that the “source” location (/path_to_files/) is written first followed by the “target” location (ucl_username@live.rd.ucl.ac.uk:/mnt/gpfs/live/path_to_storage_area/). 5.6.3.2 Backing up multiple files across multiple UCL RDS spaces We all have multiple ongoing projects, which cannot all be stored in the same UCL RDS project space (which are typically restricted to 5 Tb). Thus, there will come a time when you have to backup to multiple locations. With this in mind, it can be helpful to write a script to automate (or at least partially automate) some of this. Below is a bare-bones guide of how you might do this. As you have probably noticed if you have been using rsync to transfer files from the Ryten server to UCL RDS, every time you use this command you are prompted for a password. Thus, partial automation requires that you: Set up an SSH key pair, which allows automated user authentication. Write a script, which you can add to everytime you have another location to backup from/to. 5.6.3.2.1 Step 1: Set up SSH keys for authentication I used this guide to help me set this up. Preparing the remote server (e.g. UCL RDS) Do this in your home directory on UCL RDS e.g. /mnt/gpfs/home/skgtrhr/ # Create hidden folder in home directory mkdir -p ~/.ssh # Restrict permissions chmod 700 ~/.ssh Generating the key pair This is done in user’s home directory on the Ryten server where files will be transferred from e.g. /home/rreynolds/. To generate the key pair, enter the command below. Don’t enter a passphrase when prompted, if you would like to setup fully password-less login. # Command to generate key pair ssh-keygen -t rsa # Output will look like this Generating public/private rsa key pair. Enter file in which to save the key (/home/rreynolds/.ssh/id_rsa): /home/rreynolds/.ssh/rds_rsa # press enter, or name accordingly as was done here Created directory &#39;/home/rreynolds/.ssh&#39;. Enter passphrase (empty for no passphrase): # press enter Enter same passphrase again: # press enter Your identification has been saved in /home/rreynolds/.ssh/rds_rsa. Your public key has been saved in /home/rreynolds/.ssh/rds_rsa.pub. The key fingerprint is: SHA256:EXAMPLE rreynolds@ion-dmn-hpc3 The key&#39;s randomart image is: +---[RSA 2048]----+ | .. | | EXAMPLE| | EXAMPLE| | EXAMPLE | | EXAMPLE | | EXAMPLE | | EXAMPLE | | EXAMPLE | | EXAMPLE | +----[SHA256]-----+ If no different file name entered, the command will generate two files: ~/.ssh/id_rsa (private key) and ~/.ssh/id_rsa.pub (public key). Copy the public half of the key pair to your cloud server using the following command. Replace the user and server with your username and the server address you wish to use the key authentication on. This assumes you saved the key pair using the default file name and location. If not, just replace the key path ~/.ssh/id_rsa.pub your own key name (as I did below). # Command ssh-copy-id -i ~/.ssh/rds_rsa.pub skgtrhr@live.rd.ucl.ac.uk Set up SSH Agent to store the keys to avoid having to re-enter passphrase at every login. If you close the Ryten server terminal, you will have to repeat the command below when you open up a new terminal. ssh-agent $BASH ssh-add ~/.ssh/rds_rsa 5.6.3.2.2 Step 2: Write a script for your data backup The author of this script, Regina, is hoping to make this a more generalised script at some point, but for now, feel free to copy and modify the skeleton below. Key arguments to modify include: rserver: change to your UCL username. lbackuploc_*: change to your local backup locations. Note: because I am using the --relative flag with rsync, I add a /./ to indicate from what point I want rsync to copy the directory structure on the Ryten server. rbackuploc_*: change to your remote backup locations. Main body of backup text to suit your purposes. #!/bin/bash # Remote RDS server rserver=skgtrhr@live.rd.ucl.ac.uk # Local backup location lbackuploc_data=/data/ lbackuploc_user=/home/./rreynolds/ # Remote RDS backup locations rbackuploc_GWAS=/mnt/gpfs/live/rd01__/ritd-ag-project-rd010p-sgarc61/ rbackuploc_PDseq=/mnt/gpfs/live/ritd-ag-project-rd00v5-sgarc61/ #---Backups to $rbackuploc_GWAS--------------- echo &quot;Starting backup to $rserver:$rbackuploc_GWAS&quot; rsync -arvhe ssh --progress --relative $lbackuploc_user/projects/LDSC_Regression/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_user/data/MAGMA/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_user/misc_projects $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/LDScore/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/Alasoo2018_MacrophageQTLs/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/Fairfax2014/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/eQTLGen/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/GTEx_eQTLs/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/psychencode/ $rserver:$rbackuploc_GWAS #---Backups to $rbackuploc_PDseq-------------- echo &quot;Starting backup to $rserver:$rbackuploc_PDseq&quot; rsync -arvhe ssh --progress --relative $lbackuploc_data/RNAseq_PD/ $rserver:$rbackuploc_PDseq rsync -arvhe ssh --progress --relative $lbackuploc_user/projects/Aim2_PDsequencing_wd/ $rserver:$rbackuploc_PDseq rsync -arvhe ssh --progress --relative $lbackuploc_data/recount/SRP058181/ $rserver:$rbackuploc_PDseq echo &quot;Backup finished!&quot; 5.6.3.2.3 Step 3: Running your script After creating script, remember to set an executable permission to the script. Substitute RDS_backup.sh for the name of your script. # Command chmod +x RDS_backup.sh The script can then be run with the follow command. It is a good idea to keep a log of your backups to see if any errors have been returned during the process. For this reason, the output of the backup script is re-directed into a new log file named 20201102_RDSbackup.log, with the date of transfer. # Run script and save log file bash ./path_to_script/RDS_backup.sh &gt; ./path_to_log_directory/20201102_RDSbackup.log Finally, remember that prior to running your backup script you will have to set up SSH Agent to store the keys (as mentioned in Section 5.6.3.2.1, step 4), if you have not already done so. "],["resources.html", "6 Resources", " 6 Resources Here, sits any general useful resources that cover topics across the spectrum of science. JEFworks has a some sections for writing an abstract, reviewing papers and giving a poster presentation. Jeff Leeks book is free and outlines the core principles behind being a scientist in a open source way. "],["references.html", "7 References", " 7 References "]]
