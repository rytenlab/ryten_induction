[["index.html", "Ryten lab induction book 1 Welcome! 1.1 Useful links 1.2 Acknowledgements 1.3 Joining the Ryten lab website", " Ryten lab induction book 2021-02-09 1 Welcome! We hope you enjoy your time in the Ryten lab! The goal of this book is to capture the tasks we share as a team and document the things we would have liked to have known throughout our time in the Ryten lab. 1.1 Useful links The Ryten lab website has all of our backgrounds, developed tools, publications and baby photos. The Ryten lab GitHub currently is only used to host this book, however in future will hold any other repositories that are common to the Ryten lab. The Ryten lab Sharepoint. To access this, you must be a member of rytenlab (if you are receiving e-mails from rytenlab@live.ucl.ac.uk, then you are a member). If you are a not a member, let one of the existing members know and we’ll add you. 1.2 Acknowledgements This book was made possible thanks to the R package bookdown (Xie 2020). The below code automatically generates packages.bib, a bibtex format for all the packages listed. If you contribute to this book and include a particular R package in your guide (as with bookdown above), consider adding it to the code chunk and citing it via including [@R-package_name] in the text. knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39; ), &#39;packages.bib&#39;) 1.3 Joining the Ryten lab website To join the Ryten lab website as a team member, please fill the document you will find on the group Sharepoint site. Please, remember you must be a member of rytenlab to access this file. Once you have completed it, return it back to Sonia García Ruiz. She will then generate a profile for you on the website. References "],["contribute.html", "2 Contributing guide 2.1 Why contribute? 2.2 What should I contribute? 2.3 How should I contribute?", " 2 Contributing guide 2.1 Why contribute? Given that we work on similar topics and share a similar infrastructure, we also have a lot of common tasks. For example, every new member will have to learn how to use the Ryten server, or R in general, or potentially run RNA-seq alignment/QC. This can be daunting at first and this book aims to ease that transition. The more comprehensive this book is, the better the experience of future or existing Ryten lab members will be. Thus, we would encourage all Ryten Lab members to contribute. 2.2 What should I contribute? If you have a workflow that you’ve been asked from a colleague more than once to explain or share code, then it’s worth considering whether it should be part of this book. The more common the task, the more useful it will be when sitting in this book. From experience, the easiest time to add new workflows/instructions is during the time you actually conduct that workflow yourself so when you’re next asked to run that gene-set enrichment analysis, consider documenting that run here, even if it’s just a page with links to your code on GitHub/the server. 2.3 How should I contribute? This book is built using the R package bookdown (Xie 2020). A brilliant guide for the comprehensive functionality of bookdown is written by the author of the package Yihui Xie here. If you’re interested in writing your own book, we’d suggest checking it out. However, below is a small guide to get you started if you want to contribute to this book. 2.3.1 Basics Prerequisites. Install the bookdown R package. install.packages(&quot;bookdown&quot;) Clone the repository containing this book. If you’re unfamiliar with GitHub or git, check out this guide. git clone https://github.com/rytenlab/ryten_induction.git Adding a new page. Familiarize yourself with the structure of the book. The usage page of the bookdown guide gives a nice overview. In brief, .Rmd docs are the pages of the book. The index.Rmd serves as the header/preface/first page of the book. The remainder of the .Rmd files are labeled with “01-PAGE-NAME” and form the pages of this book. To create a new page, just make a new .Rmd and name it with an informative title. Bear in mind that the pages will be ordered by their alphanumerical name (01, 02, 03…). The contents of each .Rmd (except index.Rmd) is expected to have one “#” prefixed title, which will be the title of the page. If you want to include subsections, then use “##” or “###” etc. The rest of the page structure follows the traditional .Rmd syntax. Note: By default, .Rmd files have a YAML header at the top contained within the “—”s. If you are making a new page please remove these, leaving just a “# PAGE TITLE” at the top. The YAML header for the entire book can be found in the index.Rmd. Rendering the page/book. Throughout the writing of your page, you can check how it looks in the context of the book through either pressing the Knit button on the top left of RStudio. This will give a preview of your new page. If you want to re-render the entire book, then first create a new Rproject in the root of your local bookdown repository. Then after opening the .Rproj you should see a build panel on the top-right (shown below). Clicking the Build Book option will knit/render the entire book 2.1. It’s recommended that you continuously run these checks as you update the book, to ensure it looks as you expect and doesn’t break anything. Figure 2.1: Screen of how to build a book Publishing the book. The public version of this book sits at https://rytenlab.github.io/ryten_induction/ hosted by GitHub pages. This is updated every time you make a git push to the repository via GitHub Actions (GHA). The GHA workflow will automatically render this book and push the changes to the branch gh-pages, which is then deployed at https://rytenlab.github.io/ryten_induction/. Therefore, if your book fails to render on GHA, it won’t update. You can see if it’s failed (red X) or succeeded (green tick) on the GiHub repo a few minutes after pushing. It’s important to try rendering the book locally to ensure your changes operate as intended. If all the changes look good and you’re happy with it, then push the change from your local repository back to rytenlab/ryten_induction. Note: If you are using other R packages (outside of bookdown and rmarkdown) in your newly added pages, then this might break the GHA workflow. Don’t worry! We just need to make sure the necessary packages are installed as GHA runs on a fresh-ish install of Ubuntu. If this is the case, then speak to David (will try to automate the package installation in future). # make sure you&#39;re in your local repo cd ryten_induction # you can check this via git status git status git add YOUR_CHANGES git commit -m &quot;message&quot; git push That’s it! You’re done! Thank you for contributing to making our future lives easier :) 2.3.2 Adding References References can be added in two ways: Add a package to the code chunk in index.Rmd labeled “r_package_references”. Then, refer it in the text via [@R-package_name]. Add a bibtex entry to book.bib then refer to in via [@key]. Eg. (Wickham 2014). References "],["learning-r.html", "3 Learning R 3.1 Why R? 3.2 R resources 3.3 Asking for help 3.4 Teaching R", " 3 Learning R R is used by anyone in the Ryten lab looking to do bioinformatics analyses. Chances are, if you’ve joined to do bioinformatics you’ve come across or will come across using R. There’s a steep learning curve to start programming and it’s easy to become stumped before you become familiar, and miss out on all of the joy programming with R can give. This page is dedicated to help you get you started by pointing you to the resources that we’ve found useful no matter what stage of learning R you fall into. 3.1 Why R? This page from Hadley Wickham’s book lays out what makes R unique and why many are fond of R. Below, are the 3 key reasons we think R is great for our bioinformatics use-case: R is free and open source. This makes your analyses more reproducible if you use R and means there’s a huge community of R users. Importantly, a large proportion of this community is addressing similar questions you are, relating to genetics/bioinformatics. Bioconductor, for example, is specifically aimed at developing tools applied to all things biology. This makes our lives easier as if we run into questions that we can’t answer in the lab or via google, there might already be an R package that addresses it and if not, there are forums to ask for help. R is a high-level, functional programming language. These properties make it suited for data science and day-to-day bioinformatics analysis, where most often the leading metric is speed from data to results, rather than developing robust software. This aspect of R has inspired the development of set of packages termed the tidyverse, which makes mastering data wrangling, analysis and plotting significantly easier. R comes with one of the most easy-to-use integrated development environments (IDEs) RStudio and it’s own language for creating reproducible analyses Rmarkdown. RStudio makes the entry point into getting started with R significantly lower with the ability to manage projects, inspect objects and version control with git (+ many more). Together with Rmarkdown, a language that allows you combine R code and prose in the same document, this facilitates the creation of reproducible analyses. 3.2 R resources Whether you’ve never touched a programming language before, or you’re an expert in a different programming language, or you’re confident with conducting analyses in R, we hope that you find something useful below. 3.2.1 Beginner Not technically a resource, but one which arguably is more important. Learning R is typically easiest when you have a project to work on from the outset. This helps to keep you motivated, means you’ll cover “real” data issues and learn how to debug. It’s likely that you’ll already have an application in mind if you’re reading this, but if not, we’d encourage you to find one. One great place to start could be to ask Mina or other lab members whether any of us has something we need doing. DataCamp and codeacademy host online, interactive courses to learn R from the basics. These have been used by other’s in the Ryten Lab in the past and are a fun way to take you through the basic foundations of R. learnr is an interactive R package designed to get you started with R. As far as I’m aware, I don’t think any of us has started R through this route, however does look to be a solid resource. 3.2.2 Intermediate R for data science has pretty much all you need to know in terms of the tidyverse set of tools. R Markdown Cookbook is written by one of the authors of R Markdown, Yihui Xie, and is a good place to find the comprehensive overview of the functionality of R Markdown or look up if there’s something you’d like to do but aren’t sure how or whether it’s possible. Happy Git with R is a nicely written book on how to interface into git and GitHub from RStudio. If you haven’t heard of or used git for version controlling your scripts before, this is highly recommended and has all you need to know. 3.2.3 Advanced Advanced R is for those wondering what goes on behind the scenes in R. It covers topics from how to use object orientated programming in R, how to run benchmarks on your code to find time-limiting steps and how to speed these up using R’s interface into C++ ? R packages details the good practices for creating an R package. Packages are the best way to allow others to use your R code. You may consider packaging up your code if you want to release your functions to be used by others (either others in the lab or more widely). Workshops on how to make Bioconductor packages can be found here and here. If you have developed a method/package associated with a publication, you may want to submit it to Bioconductor. 3.3 Asking for help The world of coding can be tough at times and admitting that fact by asking for help can be even harder. But trust us, we’ve all been there. The 3 hour debug before noticing the misplaced “,”, the package that never installs, the frustrating git conflict - all too familiar. Whichever stage of your coding journey you’re at, you will always run into bugs and knowing how to efficiently find solutions is a major part of the battle. Here, we list to most common places we would ask for help from the trusty Google companion to more specific forums where you will reach experts or R package maintainers. 3.3.1 Where to ask for help? Google is often the best place to start and many issues you face won’t be a first and will be answered by forums such as Stack Overflow. The Ryten lab has a Slack workspace (ask to be added if not already) and either the channels #programming or #general are great places to reach us. If that’s intimidating, also feel free to message any of us directly. If neither Google or our lab has provided an answer to your issue, it might be that your problem is unique or specific. For these sorts of question it’s best to try and direct your query to the experts in the relevant field. For example, if your issue is targeted at a usage of an R package, then the issues page on the associated GitHub repository is the best place to get in touch with the maintainers of that package. Or, if it’s more of a broad question (e.g. what covariates should I correct for when run a differential splicing analysis) the Bioconductor support site provides a catalog of questions surrounding how to use it’s packages. 3.3.2 How to ask for help? Given that the people which you are asking (as we all) are busy and have limited time, it’s important to help make it as easy as possible to answer your query. Below, in order of importance, are the steps we’d recommend thinking about before reaching out: If it’s appropriate (i.e. not a general question) then include, at minimum, the error message and command you have run as part of your question. It’s most likely, the code will be more effective at directing your query than a text based explanation. If the question is about a bug or quite a specific situation, it’s best if you include a minimum reproducible example (reprex). This consists of setting up a small section of code that can be used to replicate your error including a sessionInfo() call (that details the versions of R packages in your environment. The reprex package provides a great way to capture both the code and it’s output in different formats e.g. an R script, markdown or html. 3.4 Teaching R If you’ve reached a point where you’re comfortable with R, you might consider teaching it. Here are some reasons we’ve taught in the past: It’s rewarding as usually students are really grateful. It looks good on your CV. Networking with companies and academic groups that you may be interested in working with/for in the future. You can earn some extra £££. It’s a great refresher of the basics of R. The Ryten lab has a existing connection with Clinician Coders, a group at UCL that aims at teaching R to clinicians. If this is of interest to you, then let Mina know and she’ll put you in touch with the right lab members involved at the time. "],["server-usage.html", "4 Server usage 4.1 Why use the Ryten server? 4.2 Usage guide 4.3 How to connect to a remote server?", " 4 Server usage 4.1 Why use the Ryten server? The Ryten server is useful for a couple of reasons: They enable a common environment for all members of the Ryten lab to work on. You can easily share results without duplication or data that’s too large to sit on your personal computers by sharing the path to the directory/file on the Ryten server. And data that lies in the server will extend beyond your time at the Ryten lab for future members to access. They allow you to conduct analysis that exceeds the computational resources of (or take extremely long on) your local computer. The Ryten server has &gt;20Tb of storage space, ~256Gb of RAM and 112 CPUs, though at times, even this will feel too small! 4.2 Usage guide The Ryten server is a shared between all Ryten lab members and we’d like to keep the experience of all user’s as smooth and enjoyable as it can be. For this reason, we’ve set out a few guidelines you should follow when using the Ryten server: Deleting files: Especially for those just starting out with programming, be aware that when you connect to Ryten server you have access to all the data and scripts owned by other Ryten lab members. Some of these can be easily regenerated, however for others regeneration will be near impossible (e.g. raw RNA-seq data) or time-consuming. There are fail-safe measures in place to prevent deletion accidents such as setting permissions to read-only and backing up our data. But please take care when removing files. Shared directories: The /data directory is where you should save common files that you expect will be used by others members of the lab. If you need to access something that seems general purpose (e.g. GTF files lie in /data/references) then it’s possible that it exists already. If you’ve checked and it doesn’t, then please add it in /data. Alternatively, if the data is project-specific then place it in your home directory (each user will have a home at the path /home/user_name). Big jobs: There’s a possibility that you’ll need run a process that will consume a large amount of memory and/or CPUs (potentially rendering the server unusable by others for a duration). This kind of run should be saved for jobs that are urgent (deadline fast approaching) or can only be run in such a way (e.g. requires loading in a huge object). If you’re planning to run something that fits this criteria, please give a heads up to the others in the lab and try to miminize the server outage time (run over weekends). 4.3 How to connect to a remote server? There are two main ways to connect to the Ryten server, both involving the Secure Socket Shell (ssh) protocol. ssh is a popular method of connecting securely to a remote server using the command line. For the Ryten server, we either directly ssh in (for a shell/bash session) or tunnel in using ssh (to use RStudio Server). Both of these methods are detailed below. These require the input of a user name and the host’s IP address (referred to as user_name and ryten_server_IP respectively below). If you don’t have either of these, please ask one of the existing members. Note: If you do run into issues during this process, it’s also most likely a problem with this guide (which we are still finalizing) rather than you. We’d really prefer if you ask rather than experiment as this helps us know which areas still need to be clarified and means we don’t run into any unintentional server crashes. 4.3.1 Setup UCL VPN If you want to connect to the Ryten server whilst you’re at home, in a coffee shop or anywhere outside of UCL (i.e. not connected to eduroam) then you need to first login to UCL’s virtual private network each time you reconnect to the Ryten server. The official guide on how to do so can be found here. The username and password for this are your UCL credentials (e.g. those you would use for Portico). Note: make sure your inputted vpn address is “vpn.ucl.ac.uk”. There are other ucl vpn addresses such as “ucl-lmcb.ucl.ac.uk”, however these will not grant you access to the Ryten server’s IP. Once you’ve successfully connected you should see the following: Figure 4.1: Successful VPN connection example 4.3.2 Are you a Windows user? If the answer is no and you’re on a Mac or linux operating system, then skip ahead to the next section. The ssh commands are required to be run on a local terminal, which isn’t available by default on Windows. To access a local terminal on Windows, we use the ssh client mobaXterm. Please download this and install it. To configure this to access the Ryten server, do the following: Click on the “Sessions” button to start a new session. Figure 4.2: Screenshot of mobaXterm ‘Sessions’ button Click on the SSH button in order to create a new SSH session. Every session you start will be automatically saved, so you will only have to do this once. In the “Remote host” field, enter the ryten_server_IP (ask one of the existing members if you don’t this). You can optionally also specify your username (all this will mean is that you are not prompted for it when you access the server). Once done, click okay. Figure 4.3: Screenshot of mobaXterm ‘Session settings’ screen. The server will now appear in your saved sessions. Anytime you wish to access the server, simply double click on the saved session. 4.3.3 Connecting via RStudio Server The Ryten server has a continuously running, free version of RStudio Server installed. This allows you to use the nice interface of RStudio, whilst accessing the computing infrastructure of the Ryten Server. This is most commonly what you’ll be using when you want to write R code. The Ryten server’s RStudio Server is available via localhost:8787. In order to access this on our own machines, we link localhost:8787 on the server to the same address on our local machines. This can be achieved by running the the command below in your local terminal: Note: make sure you run this from your local terminal and NOT from inside the server. If you are a Windows user, you can open a local terminal within mobaXterm. If you do accidentally run this from inside the server, do not fear, the problem can be resolved. Simply run pkill -u user_name ssh (where user_name represents your Ryten server user_name). This will kill all ssh commands run by you. ssh -X -N -f -L localhost:8787:localhost:8787 user_name@ryten_server_IP The easiest way to run this would be to copy the command above and replace user_name with your own and ryten_server_IP with the correct IP (ask one of the existing members if you don’t have either). After you have run this command successfully (you’ll be asked to enter your credentials the first time) then you can access the RStudio Server session via typing localhost:8787 in the address bar on your internet browser. You will see a RStudio theme’d credential screen the first time round where you should enter your Ryten server user_name and password. After which, you should be all set! Enjoy :) 4.3.4 Connecting via a shell session The second method to connect to the Ryten server is via an interactive shell/bash session. If you are using mobaXterm on Windows, it’s advised you use their sessions feature rather than manually calling ssh from your local terminal. This method is often used for things such as exploring the files/directories that exist on the server, checking what’s currently running on the server using top, running non-R processes and setting up big runs that can continue even after you close your connection to server. To do this use the command below from your local terminal: ssh user_name@ryten_server_IP This will open another terminal, on which you can do anything you would in your local terminal, however instead you’ll be using the infrastructure of the Ryten server. "],["data-backup.html", "5 Data backup 5.1 Why backup your data stored on the Ryten server? 5.2 What options are available to you as Ryten server user? 5.3 What are good practices for data backup? 5.4 AWS 5.5 Github 5.6 UCL RDS", " 5 Data backup The purpose of this chapter is to guide you through the available options for backup of data stored on the Ryten server. For backup of data on your personal/work computers, we recommend making use of cloud solutions, such as OneDrive for Business, available to UCL staff and students. Note: data backup is the responsibility of each Ryten server user. We do not currently have any automated systems in place, so it is really important that you take the time to ensure you have all the proper backups in place. 5.1 Why backup your data stored on the Ryten server? There are several good reasons to backup your data stored on the Ryten server, including: As with all other servers, the Ryten server can also be affected by server failure (this has not happened to us, *touch wood*, but it certainly can). There may be occasions when you cannot access the server (e.g. VPN does not permit access). Other users may accidentally delete or modify one of your files (yes, this has happened in the past). In short, a lot of things can happen, which might mean you need to access your files via other means. Thus, it is important to have a backup of the raw files you use, any processed intermediate files, and the scripts you use both for data processing and analysis. 5.2 What options are available to you as Ryten server user? Luckily, there are plenty of options available to you, including: Amazon Web Services (AWS) The Ryten lab has an account on AWS where it is possible to store data. We primarily use this for unprocessed data (e.g. RNA-sequencing FASTQs), although it can also be useful to store processed files (e.g. BAMs) that collaborators may ask to access. GitHub Git is a version control system (think “Track Changes” in Word), while GitHub is a cloud-based hosting service for Git-based projects (think OneDrive). We primarily use this to store functions, scripts and workflows for our analyses. Importantly, as a student/researcher you can access a free/discounted version of GitHub Pro, which allows users to have private repositories. Private repositories are useful for ongoing projects that are not ready for publication just yet. Upon publication, these private repositories can be made public. If you’re unfamiliar with GitHub or git, please refer to this handy guide, also mentioned in Section 2.3. UCL RDS This is a UCL-based service, while allows UCL staff to store research data while projects are ongoing. We primarily use this to store processed intermediate files. 5.3 What are good practices for data backup? It is a good idea to ensure that really important files that cannot be regenerated (e.g. raw sequencing files) or alternatively would take days/weeks to re-generate are stored in two backup locations. Make sure the scripts you need to re-generate analyses/files are on GitHub. Ensure that you have an easily accessible record of what you are backing up and where. Most importantly, make sure you regularly backup to these locations. E.g. ongoing projects should be backed up to UCL RDS at least once a month, while scripts/workflows should preferably be committed to GitHub daily/weekly. 5.4 AWS Sonia Garcia Ruiz is our AWS guru. You will need to get in contact with Sonia to arrange access to our AWS account. 5.4.1 Accessing AWS using the AWS Command Line Interface The AWS Command Line Interface (or AWS CLI) is an open source tool that enables you to interact with the AWS services from your command-line Shell. AWS CLI tool is already installed in our server, and it is very simple to use. Below are described the most commonly used interactions with AWS. 5.4.1.1 Configure the AWS CLI service To configure the service, please type “aws configure” on the console. This command is interactive, so the service will prompt you four times to enter some config information. Below an example (all RytenLab members have to ask me to send them their secret AWS credentials): $ aws configure AWS Access Key ID [None]: your_access_key AWS Secret Access Key [None]: your_secret_key Default region name [None]: eu-west-2 Default output format [None]: json To check whether the connection with AWS has been correctly stablished, we can type the following command to list all our current buckets. $ aws s3 ls 5.4.1.2 Upload a single file to AWS Let’s suppose we have a bucket on AWS called ‘my-bucket’. Let’s also suppose you have a file called ‘myfile.txt’ stored in your local that you would like to upload to AWS. To upload the file ‘myfile.txt’ to the bucket ‘my-bucket’: $ aws s3 cp myfile.txt s3://my-bucket/ 5.4.1.3 Download a single file from AWS To download the file ‘myfile.txt’ from the ‘s3://my-bucket/’ AWS bucket into your local folder: $ aws s3 cp s3://my-bucket/myfile.txt ./my_local_folder 5.4.1.4 Upload multiple files to AWS To upload multiple files, we can use the sync command. The sync command syncs objects under a specified local folder to files in a AWS bucket by uploading them to AWS. $ aws s3 sync my_local_folder/ s3://my-bucket/ 5.4.1.5 Download multiple files from AWS To download multiple files from an AWS bucket to your local folder, we can also use the sync command by changing the order of the parameters. Please, be aware the costs associated with downloading files correspond to $0.090 per GB - first 10 TB / month data transfer out beyond the global free tier. $ aws s3 sync s3://my-bucket/my_remote_folder/ ./my_local_folder 5.4.2 Checking AWS file integrity Considering the example used in the previous section, let’s check the integrity of the local folder ‘./my_local_folder’ matches with the integrity of the remote AWS folder ‘s3://my-bucket/my_local_folder/’. First, clone the ‘aws-s3-integrity-check’ repo. $ git clone https://github.com/SoniaRuiz/aws-s3-integrity-check.git Clone the ‘s3md5’ repo. $ git clone https://github.com/antespi/s3md5.git Move the s3md5 folder within the aws-s3-integrity-check folder: $ mv ./s3md5 ./aws-s3-integrity-check Next, grant execution access permission to he s3md5 script file. $ chmod 755 ./aws-s3-integrity-check/s3md5/s3md5 The aws-s3-integrity-check folder should look similar to the following: total 16 -rw-r--r-- 1 your_user your_group 3573 date README.md -rwxr-xr-x 1 your_user your_group 3301 date aws_check_integrity.sh drwxr-xr-x 2 your_user your_group 4096 date s3md5 Execute the script ‘aws_check_integrity.sh’ following the this structure: aws_check_integrity.sh ‘local_path’ ‘bucket_name’ ‘bucket_folder’ $ aws_check_integrity.sh ./my_local_folder my-bucket my_local_folder/ 5.4.3 Creating a new AWS bucket To create a new AWS bucket, we recommend using the following configuration: Region: EU London Block all public access: enabled Bucket Versioning: enable Tags: Key = “data-owner” / Value = “your name” Key = “data-origin” / Value = “the origin of the data in one word (i.e. the name of a project, the name of a server)” Default encryption: enable - Amazon S3 key (SSE-S3) Advanced settings Object Lock: enable/disable, depending on your type of data (more info here) 5.4.4 Further info Below are some extra useful links, also generated by Sonia. These links are hosted on the Ryten lab Sharepoint, which you can access provided you are a member. Accessing AWS using the AWS Command Line Interface Checking AWS file integrity Information about existing AWS buckets 5.5 Github A good explanation of how to get started with git using RStudio can be in the book “Happy Git with R” linked here. TO BE ADDED (MAYBE A SEPARATE PAGE WITH GITHUB TUTORIAL?). Link worth adding: https://www.makeareadme.com/ 5.6 UCL RDS 5.6.1 Registering a project Prior to using UCL RDS, you need to ensure that you have a project space allocated to you. This can be done here. If you are not UCL staff, you will not be able to register your own project. If that is the case, reach out to one of us that is, and we can register a project on your behalf and add you as a project member. 5.6.2 Accessing your project space When the project was generated, researchdata-support@ucl.ac.uk will send you an e-mail with important details about the location of your storage area (an example is: /mnt/gpfs/live/rd01__/path_to_storage_area/) From the Ryten server, this project space can be accessed using the following command, and substituting your UCL username into the command below, instead of ucl_username. ssh ucl_username@live.rd.ucl.ac.uk You will be prompted for a password, and upon entering this you will be re-directed to your home space on UCL RDS. You can then move to your project area using the following command, and substituting in the path to your storage area. cd /mnt/gpfs/live/path_to_storage_area/ 5.6.3 Using rsync to backup to UCL RDS rsync (remote sync), as the name suggests, permits file transfer across systems (e.g. from the Ryten server to UCL RDS). While the initial backup will take a while, rsync is a super handy tool for regular backups, as it will only transfer files that have been changed after the initial backup. Furthermore, with the correct flags enabled, you can ensure that any files that have been deleted on the local server (Ryten server) are not deleted on the remote server (UCL RDS) when running rsync again. 5.6.3.1 Simple use case Google is a great resource, so feel free to read up a bit more on rsync. Also, you can always run the command rsync --help to see what options there are. Below is a simple use case, with the various flags explained with the #. # -a preserve access times etc # -r recursive # -v verbose # -h human readable figures # -e select the protocol - ssh used here # --progress display progress bar # --relative preserves directory structure in the local backup location from /./ onwards # Example rsync -arvhe ssh --progress --relative /path_to_files/ ucl_username@live.rd.ucl.ac.uk:/mnt/gpfs/live/path_to_storage_area/ Notice that the “source” location (/path_to_files/) is written first followed by the “target” location (ucl_username@live.rd.ucl.ac.uk:/mnt/gpfs/live/path_to_storage_area/). 5.6.3.2 Backing up multiple files across multiple UCL RDS spaces We all have multiple ongoing projects, which cannot all be stored in the same UCL RDS project space (which are typically restricted to 5 Tb). Thus, there will come a time when you have to backup to multiple locations. With this in mind, it can be helpful to write a script to automate (or at least partially automate) some of this. Below is a bare-bones guide of how you might do this. As you have probably noticed if you have been using rsync to transfer files from the Ryten server to UCL RDS, every time you use this command you are prompted for a password. Thus, partial automation requires that you: Set up an SSH key pair, which allows automated user authentication. Write a script, which you can add to everytime you have another location to backup from/to. 5.6.3.2.1 Step 1: Set up SSH keys for authentication I used this guide to help me set this up. Preparing the remote server (e.g. UCL RDS) Do this in your home directory on UCL RDS e.g. /mnt/gpfs/home/ucl_username/ # Create hidden folder in home directory mkdir -p ~/.ssh # Restrict permissions chmod 700 ~/.ssh Generating the key pair This is done in user’s home directory on the Ryten server where files will be transferred from e.g. /home/rreynolds/. To generate the key pair, enter the command below. Don’t enter a passphrase when prompted, if you would like to setup fully password-less login. # Command to generate key pair ssh-keygen -t rsa # Output will look like this Generating public/private rsa key pair. Enter file in which to save the key (/home/rreynolds/.ssh/id_rsa): /home/rreynolds/.ssh/rds_rsa # press enter, or name accordingly as was done here Created directory &#39;/home/rreynolds/.ssh&#39;. Enter passphrase (empty for no passphrase): # press enter Enter same passphrase again: # press enter Your identification has been saved in /home/rreynolds/.ssh/rds_rsa. Your public key has been saved in /home/rreynolds/.ssh/rds_rsa.pub. The key fingerprint is: SHA256:EXAMPLE rreynolds@ion-dmn-hpc3 The key&#39;s randomart image is: +---[RSA 2048]----+ | .. | | EXAMPLE| | EXAMPLE| | EXAMPLE | | EXAMPLE | | EXAMPLE | | EXAMPLE | | EXAMPLE | | EXAMPLE | +----[SHA256]-----+ If no different file name entered, the command will generate two files: ~/.ssh/id_rsa (private key) and ~/.ssh/id_rsa.pub (public key). Copy the public half of the key pair to your cloud server using the following command. Replace the user and server with your username and the server address you wish to use the key authentication on. This assumes you saved the key pair using the default file name and location. If not, just replace the key path ~/.ssh/id_rsa.pub your own key name (as I did below). # Command ssh-copy-id -i ~/.ssh/rds_rsa.pub ucl_username@live.rd.ucl.ac.uk Set up SSH Agent to store the keys to avoid having to re-enter passphrase at every login. If you close the Ryten server terminal, you will have to repeat the command below when you open up a new terminal. ssh-agent $BASH ssh-add ~/.ssh/rds_rsa 5.6.3.2.2 Step 2: Write a script for your data backup The author of this script, Regina, is hoping to make this a more generalised script at some point, but for now, feel free to copy and modify the skeleton below. Key arguments to modify include: rserver: change to your UCL username. lbackuploc_*: change to your local backup locations. Note: because I am using the --relative flag with rsync, I add a /./ to indicate from what point I want rsync to copy the directory structure on the Ryten server. rbackuploc_*: change to your remote backup locations. Main body of backup text to suit your purposes. #!/bin/bash # Remote RDS server rserver=ucl_username@live.rd.ucl.ac.uk # Local backup location lbackuploc_data=/data/ lbackuploc_user=/home/./ryten_username/ # Remote RDS backup locations rbackuploc_GWAS=/mnt/gpfs/live/rd01__/path_to_GWAS_backup/ rbackuploc_PDseq=/mnt/gpfs/live/path_to_PD_backup/ #---Backups to $rbackuploc_GWAS--------------- echo &quot;Starting backup to $rserver:$rbackuploc_GWAS&quot; rsync -arvhe ssh --progress --relative $lbackuploc_user/projects/LDSC_Regression/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_user/data/MAGMA/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_user/misc_projects $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/LDScore/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/Alasoo2018_MacrophageQTLs/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/Fairfax2014/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/eQTLGen/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/GTEx_eQTLs/ $rserver:$rbackuploc_GWAS rsync -arvhe ssh --progress --relative $lbackuploc_data/psychencode/ $rserver:$rbackuploc_GWAS #---Backups to $rbackuploc_PDseq-------------- echo &quot;Starting backup to $rserver:$rbackuploc_PDseq&quot; rsync -arvhe ssh --progress --relative $lbackuploc_data/RNAseq_PD/ $rserver:$rbackuploc_PDseq rsync -arvhe ssh --progress --relative $lbackuploc_user/projects/Aim2_PDsequencing_wd/ $rserver:$rbackuploc_PDseq rsync -arvhe ssh --progress --relative $lbackuploc_data/recount/SRP058181/ $rserver:$rbackuploc_PDseq echo &quot;Backup finished!&quot; 5.6.3.2.3 Step 3: Running your script After creating script, remember to set an executable permission to the script. Substitute RDS_backup.sh for the name of your script. # Command chmod +x RDS_backup.sh The script can then be run with the follow command. It is a good idea to keep a log of your backups to see if any errors have been returned during the process. For this reason, the output of the backup script is re-directed into a new log file named 20201102_RDSbackup.log, with the date of transfer. # Run script and save log file bash ./path_to_script/RDS_backup.sh &gt; ./path_to_log_directory/20201102_RDSbackup.log Finally, remember that prior to running your backup script you will have to set up SSH Agent to store the keys (as mentioned in Section 5.6.3.2.1, step 4), if you have not already done so. "],["shiny-basics.html", "6 Shiny basics 6.1 Integrating Shiny and AWS data storage", " 6 Shiny basics The purpose of this chapter is to guide you through various processes that you might need to go through to develop a Shiny R application. 6.1 Integrating Shiny and AWS data storage This section aims to demonstrate how to utilise the Amazon Web Service (AWS) API to load data from an AWS bucket into the R environment. It then provides an example of how to use this protocol within a Shiny web application. 6.1.1 Install the aws.s3 package # install package install.packages(&#39;aws.s3&#39;) # load package library(aws.s3) 6.1.2 Getting your unique AWS access keys - refer to Sonia for help with this step From https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html: AWS access keys allow you to sign programmatic requests to the AWS CLI or AWS API. Access keys consist of two parts: an access key ID (for example, AKIAIOSFODNN7EXAMPLE) and a secret access key (for example, wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY). Like a user name and password, you must use both the access key ID and secret access key together to authenticate your requests. Manage your access keys as securely as you do your user name and password (i.e. include the .Renviron file in your .gitignore file if this is a project you will be storing in a GitHub repository). 6.1.3 Setting up your .Renviron file Once you have your access key, secret access key and AWS default region (see step 1), this is the file that will store this information. Assuming that you are in your working directory/ same directory as your Shiny app.R file, run the command touch ./.Renviron from the command line to generate the .Renviron file. Then open this file, either on the command line, vi .Renviron, or interactively on Rstudio. To edit on the command line, use hit ESC followed by i to insert text, then to save and close, ESC followed by :wq. Add your access key, secret access key and AWS default region, for example: Figure 6.1: .Renviron file example Save and close the .Renviron file. 6.1.4 Loading AWS objects The following command will load your access keys from your .Renviron file in an anonymised format, meaning you can put this in the body of your Shiny app.R file. Sys.setenv(&quot;AWS_ACCESS_KEY_ID&quot;=Sys.getenv(&quot;AWS_ACCESS_KEY_ID&quot;), &quot;AWS_SECRET_ACCESS_KEY&quot;=Sys.getenv(&quot;AWS_SECRET_ACCESS_KEY&quot;), &quot;AWS_DEFAULT_REGION&quot;=Sys.getenv(&quot;AWS_DEFAULT_REGION&quot;)) Now you can use the AWS API to access remote files using the aws.s3 package. The following example uses the s3read_using function and calls read.csv on the object specified by the object argument. Other reader functions can be used, such as readr::read_csv or fst::read.fst. # load aws.s3 library library(aws.s3) # read in csv from AWS s3 bucket obj1 &lt;- aws.s3::s3read_using(read.csv, object = &quot;s3://your-bucket/dataframe.csv&quot;) 6.1.5 Shiny/AWS example Loading data from AWS in a Shiny app.R file app.R is the core server/UI file you will have if you are building a Shiny app. This example app.R file includes all the necessary code to load data from an AWS bucket ## app.R ## # load libraries library(shiny) library(aws.s3) # load access keys Sys.setenv(&quot;AWS_ACCESS_KEY_ID&quot;=Sys.getenv(&quot;AWS_ACCESS_KEY_ID&quot;), &quot;AWS_SECRET_ACCESS_KEY&quot;=Sys.getenv(&quot;AWS_SECRET_ACCESS_KEY&quot;), &quot;AWS_DEFAULT_REGION&quot;=Sys.getenv(&quot;AWS_DEFAULT_REGION&quot;)) # load data from AWS bucket, assign to global obj1 &lt;&lt;- aws.s3::s3read_using(read.csv, object = &quot;s3://your-bucket/dataframe.csv&quot;) # define server function server &lt;- function(input, output) { # server code } # define UI function ui &lt;- fluidPage( # UI code ) # run shinyApp function shinyApp(ui = ui, server = server) "],["terra-and-google-cloud.html", "7 Terra and Google Cloud 7.1 Introduction to Terra and Google Cloud 7.2 Using the Terra platform 7.3 Introduction to the AMP-PD data", " 7 Terra and Google Cloud 7.1 Introduction to Terra and Google Cloud 7.1.1 General overview 7.1.2 Your account 7.1.3 The billing project 7.1.4 SQL queries 7.2 Using the Terra platform 7.2.1 General structure 7.2.1.1 Workspaces 7.2.1.2 Dashboard 7.2.1.3 Data 7.2.1.4 Notebooks 7.2.1.5 Workflows 7.2.2 Get help 7.3 Introduction to the AMP-PD data "],["resources.html", "8 Resources 8.1 How-tos 8.2 Reproducible science 8.3 Heritability and LD score regression 8.4 Statistics and data visualisation 8.5 Books", " 8 Resources Here, sits any general useful resources that cover topics across the spectrum of science. 8.1 How-tos JEFworks - has some sections for writing an abstract, reviewing papers and giving a poster presentation. 8.2 Reproducible science Good enough practices in scientific computing - article with good computing practices that every researcher can adopt, regardless of their current level of computational skill Improve your workflow for reproducible science - video from a 2-hour workshop on using R, R Markdown, Git, and GitHub to improve reproducibility. This is an excellent primer for new starters on good practices to apply to every research project. Slides from the workshop are available here. 8.3 Heritability and LD score regression Beginner guides to defining heritability and estimating heritability - these are two excellent blog posts from the Neale lab, which break down the concept of heritability into plain, non-jargon English. LD Score Regression, Heritability and Partitioning and Genetic Correlation - two approximately 1-hour YouTube videos from a summer school covering LD score regression. This is a great place to start understanding the underlying principles and assumptions of LDSC. 8.4 Statistics and data visualisation Fundamentals of Data Visualization - excellent book meant as a guide to making visualizations that accurately reflect the data, tell a story, and look professional. Visualisations based on ggplot2. A great read no matter what stage of your career you’re at. Tidy Modeling with R - nice, short book on using the tidymodels packages for model building. 8.5 Books Jeff Leeks book - free and outlines the core principles behind being a scientist in a open source way. "],["references.html", "9 References", " 9 References "]]
